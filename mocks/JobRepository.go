// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "git.garena.com/sea-labs-id/bootcamp/batch-03/maulana-jaelani/exercise-job-application-rest-api/dto"
	entity "git.garena.com/sea-labs-id/bootcamp/batch-03/maulana-jaelani/exercise-job-application-rest-api/entity"

	mock "github.com/stretchr/testify/mock"
)

// JobRepository is an autogenerated mock type for the JobRepository type
type JobRepository struct {
	mock.Mock
}

// CloseJob provides a mock function with given fields: ctx, jobId
func (_m *JobRepository) CloseJob(ctx context.Context, jobId int) error {
	ret := _m.Called(ctx, jobId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJob provides a mock function with given fields: ctx, job
func (_m *JobRepository) CreateJob(ctx context.Context, job entity.Job) (*int, error) {
	ret := _m.Called(ctx, job)

	var r0 *int
	if rf, ok := ret.Get(0).(func(context.Context, entity.Job) *int); ok {
		r0 = rf(ctx, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllJob provides a mock function with given fields: ctx
func (_m *JobRepository) FindAllJob(ctx context.Context) ([]entity.Job, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Job
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindJob provides a mock function with given fields: ctx, jobId
func (_m *JobRepository) FindJob(ctx context.Context, jobId int) (*entity.Job, error) {
	ret := _m.Called(ctx, jobId)

	var r0 *entity.Job
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Job); ok {
		r0 = rf(ctx, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetExpiredDate provides a mock function with given fields: ctx, data
func (_m *JobRepository) SetExpiredDate(ctx context.Context, data dto.Expiry) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Expiry) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetQuota provides a mock function with given fields: ctx, data
func (_m *JobRepository) SetQuota(ctx context.Context, data dto.Quota) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Quota) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
